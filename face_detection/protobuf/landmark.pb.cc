// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: landmark.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "landmark.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* FaceInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FaceInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* BoundingBox_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BoundingBox_reflection_ = NULL;
const ::google::protobuf::Descriptor* LandMark_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LandMark_reflection_ = NULL;
const ::google::protobuf::Descriptor* FaceInfos_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FaceInfos_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_landmark_2eproto() {
  protobuf_AddDesc_landmark_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "landmark.proto");
  GOOGLE_CHECK(file != NULL);
  FaceInfo_descriptor_ = file->message_type(0);
  static const int FaceInfo_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FaceInfo, state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FaceInfo, filename_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FaceInfo, basename_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FaceInfo, box_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FaceInfo, landmark_),
  };
  FaceInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FaceInfo_descriptor_,
      FaceInfo::default_instance_,
      FaceInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FaceInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FaceInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FaceInfo));
  BoundingBox_descriptor_ = file->message_type(1);
  static const int BoundingBox_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BoundingBox, startx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BoundingBox, endx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BoundingBox, starty_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BoundingBox, endy_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BoundingBox, width_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BoundingBox, height_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BoundingBox, centroidx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BoundingBox, centroidy_),
  };
  BoundingBox_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BoundingBox_descriptor_,
      BoundingBox::default_instance_,
      BoundingBox_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BoundingBox, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BoundingBox, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BoundingBox));
  LandMark_descriptor_ = file->message_type(2);
  static const int LandMark_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LandMark, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LandMark, x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LandMark, y_),
  };
  LandMark_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LandMark_descriptor_,
      LandMark::default_instance_,
      LandMark_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LandMark, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LandMark, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LandMark));
  FaceInfos_descriptor_ = file->message_type(3);
  static const int FaceInfos_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FaceInfos, info_),
  };
  FaceInfos_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FaceInfos_descriptor_,
      FaceInfos::default_instance_,
      FaceInfos_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FaceInfos, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FaceInfos, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FaceInfos));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_landmark_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FaceInfo_descriptor_, &FaceInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BoundingBox_descriptor_, &BoundingBox::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LandMark_descriptor_, &LandMark::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FaceInfos_descriptor_, &FaceInfos::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_landmark_2eproto() {
  delete FaceInfo::default_instance_;
  delete FaceInfo_reflection_;
  delete BoundingBox::default_instance_;
  delete BoundingBox_reflection_;
  delete LandMark::default_instance_;
  delete LandMark_reflection_;
  delete FaceInfos::default_instance_;
  delete FaceInfos_reflection_;
}

void protobuf_AddDesc_landmark_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\016landmark.proto\"u\n\010FaceInfo\022\r\n\005state\030\001 "
    "\002(\010\022\020\n\010filename\030\002 \002(\t\022\020\n\010basename\030\003 \002(\t\022"
    "\031\n\003box\030\004 \001(\0132\014.BoundingBox\022\033\n\010landmark\030\005"
    " \003(\0132\t.LandMark\"\216\001\n\013BoundingBox\022\016\n\006start"
    "X\030\001 \002(\021\022\014\n\004endX\030\002 \002(\021\022\016\n\006startY\030\003 \002(\021\022\014\n"
    "\004endY\030\004 \002(\021\022\r\n\005width\030\005 \002(\r\022\016\n\006height\030\006 \002"
    "(\r\022\021\n\tcentroidX\030\007 \002(\021\022\021\n\tcentroidY\030\010 \002(\021"
    "\",\n\010LandMark\022\n\n\002id\030\001 \002(\r\022\t\n\001X\030\002 \002(\021\022\t\n\001Y"
    "\030\003 \002(\021\"$\n\tFaceInfos\022\027\n\004info\030\001 \003(\0132\t.Face"
    "Info", 364);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "landmark.proto", &protobuf_RegisterTypes);
  FaceInfo::default_instance_ = new FaceInfo();
  BoundingBox::default_instance_ = new BoundingBox();
  LandMark::default_instance_ = new LandMark();
  FaceInfos::default_instance_ = new FaceInfos();
  FaceInfo::default_instance_->InitAsDefaultInstance();
  BoundingBox::default_instance_->InitAsDefaultInstance();
  LandMark::default_instance_->InitAsDefaultInstance();
  FaceInfos::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_landmark_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_landmark_2eproto {
  StaticDescriptorInitializer_landmark_2eproto() {
    protobuf_AddDesc_landmark_2eproto();
  }
} static_descriptor_initializer_landmark_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int FaceInfo::kStateFieldNumber;
const int FaceInfo::kFilenameFieldNumber;
const int FaceInfo::kBasenameFieldNumber;
const int FaceInfo::kBoxFieldNumber;
const int FaceInfo::kLandmarkFieldNumber;
#endif  // !_MSC_VER

FaceInfo::FaceInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:FaceInfo)
}

void FaceInfo::InitAsDefaultInstance() {
  box_ = const_cast< ::BoundingBox*>(&::BoundingBox::default_instance());
}

FaceInfo::FaceInfo(const FaceInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:FaceInfo)
}

void FaceInfo::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  state_ = false;
  filename_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  basename_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  box_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FaceInfo::~FaceInfo() {
  // @@protoc_insertion_point(destructor:FaceInfo)
  SharedDtor();
}

void FaceInfo::SharedDtor() {
  if (filename_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete filename_;
  }
  if (basename_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete basename_;
  }
  if (this != default_instance_) {
    delete box_;
  }
}

void FaceInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FaceInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FaceInfo_descriptor_;
}

const FaceInfo& FaceInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_landmark_2eproto();
  return *default_instance_;
}

FaceInfo* FaceInfo::default_instance_ = NULL;

FaceInfo* FaceInfo::New() const {
  return new FaceInfo;
}

void FaceInfo::Clear() {
  if (_has_bits_[0 / 32] & 15) {
    state_ = false;
    if (has_filename()) {
      if (filename_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        filename_->clear();
      }
    }
    if (has_basename()) {
      if (basename_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        basename_->clear();
      }
    }
    if (has_box()) {
      if (box_ != NULL) box_->::BoundingBox::Clear();
    }
  }
  landmark_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FaceInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:FaceInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bool state = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &state_)));
          set_has_state();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_filename;
        break;
      }

      // required string filename = 2;
      case 2: {
        if (tag == 18) {
         parse_filename:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_filename()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->filename().data(), this->filename().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "filename");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_basename;
        break;
      }

      // required string basename = 3;
      case 3: {
        if (tag == 26) {
         parse_basename:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_basename()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->basename().data(), this->basename().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "basename");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_box;
        break;
      }

      // optional .BoundingBox box = 4;
      case 4: {
        if (tag == 34) {
         parse_box:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_box()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_landmark;
        break;
      }

      // repeated .LandMark landmark = 5;
      case 5: {
        if (tag == 42) {
         parse_landmark:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_landmark()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_landmark;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:FaceInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:FaceInfo)
  return false;
#undef DO_
}

void FaceInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:FaceInfo)
  // required bool state = 1;
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->state(), output);
  }

  // required string filename = 2;
  if (has_filename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->filename().data(), this->filename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "filename");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->filename(), output);
  }

  // required string basename = 3;
  if (has_basename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->basename().data(), this->basename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "basename");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->basename(), output);
  }

  // optional .BoundingBox box = 4;
  if (has_box()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->box(), output);
  }

  // repeated .LandMark landmark = 5;
  for (int i = 0; i < this->landmark_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->landmark(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:FaceInfo)
}

::google::protobuf::uint8* FaceInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:FaceInfo)
  // required bool state = 1;
  if (has_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->state(), target);
  }

  // required string filename = 2;
  if (has_filename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->filename().data(), this->filename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "filename");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->filename(), target);
  }

  // required string basename = 3;
  if (has_basename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->basename().data(), this->basename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "basename");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->basename(), target);
  }

  // optional .BoundingBox box = 4;
  if (has_box()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->box(), target);
  }

  // repeated .LandMark landmark = 5;
  for (int i = 0; i < this->landmark_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->landmark(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:FaceInfo)
  return target;
}

int FaceInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bool state = 1;
    if (has_state()) {
      total_size += 1 + 1;
    }

    // required string filename = 2;
    if (has_filename()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->filename());
    }

    // required string basename = 3;
    if (has_basename()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->basename());
    }

    // optional .BoundingBox box = 4;
    if (has_box()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->box());
    }

  }
  // repeated .LandMark landmark = 5;
  total_size += 1 * this->landmark_size();
  for (int i = 0; i < this->landmark_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->landmark(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FaceInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FaceInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FaceInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FaceInfo::MergeFrom(const FaceInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  landmark_.MergeFrom(from.landmark_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_state()) {
      set_state(from.state());
    }
    if (from.has_filename()) {
      set_filename(from.filename());
    }
    if (from.has_basename()) {
      set_basename(from.basename());
    }
    if (from.has_box()) {
      mutable_box()->::BoundingBox::MergeFrom(from.box());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FaceInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FaceInfo::CopyFrom(const FaceInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FaceInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  if (has_box()) {
    if (!this->box().IsInitialized()) return false;
  }
  if (!::google::protobuf::internal::AllAreInitialized(this->landmark())) return false;
  return true;
}

void FaceInfo::Swap(FaceInfo* other) {
  if (other != this) {
    std::swap(state_, other->state_);
    std::swap(filename_, other->filename_);
    std::swap(basename_, other->basename_);
    std::swap(box_, other->box_);
    landmark_.Swap(&other->landmark_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FaceInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FaceInfo_descriptor_;
  metadata.reflection = FaceInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BoundingBox::kStartXFieldNumber;
const int BoundingBox::kEndXFieldNumber;
const int BoundingBox::kStartYFieldNumber;
const int BoundingBox::kEndYFieldNumber;
const int BoundingBox::kWidthFieldNumber;
const int BoundingBox::kHeightFieldNumber;
const int BoundingBox::kCentroidXFieldNumber;
const int BoundingBox::kCentroidYFieldNumber;
#endif  // !_MSC_VER

BoundingBox::BoundingBox()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:BoundingBox)
}

void BoundingBox::InitAsDefaultInstance() {
}

BoundingBox::BoundingBox(const BoundingBox& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:BoundingBox)
}

void BoundingBox::SharedCtor() {
  _cached_size_ = 0;
  startx_ = 0;
  endx_ = 0;
  starty_ = 0;
  endy_ = 0;
  width_ = 0u;
  height_ = 0u;
  centroidx_ = 0;
  centroidy_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BoundingBox::~BoundingBox() {
  // @@protoc_insertion_point(destructor:BoundingBox)
  SharedDtor();
}

void BoundingBox::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BoundingBox::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BoundingBox::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BoundingBox_descriptor_;
}

const BoundingBox& BoundingBox::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_landmark_2eproto();
  return *default_instance_;
}

BoundingBox* BoundingBox::default_instance_ = NULL;

BoundingBox* BoundingBox::New() const {
  return new BoundingBox;
}

void BoundingBox::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<BoundingBox*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(startx_, centroidy_);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BoundingBox::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:BoundingBox)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required sint32 startX = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &startx_)));
          set_has_startx();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_endX;
        break;
      }

      // required sint32 endX = 2;
      case 2: {
        if (tag == 16) {
         parse_endX:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &endx_)));
          set_has_endx();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_startY;
        break;
      }

      // required sint32 startY = 3;
      case 3: {
        if (tag == 24) {
         parse_startY:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &starty_)));
          set_has_starty();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_endY;
        break;
      }

      // required sint32 endY = 4;
      case 4: {
        if (tag == 32) {
         parse_endY:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &endy_)));
          set_has_endy();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_width;
        break;
      }

      // required uint32 width = 5;
      case 5: {
        if (tag == 40) {
         parse_width:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &width_)));
          set_has_width();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_height;
        break;
      }

      // required uint32 height = 6;
      case 6: {
        if (tag == 48) {
         parse_height:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &height_)));
          set_has_height();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_centroidX;
        break;
      }

      // required sint32 centroidX = 7;
      case 7: {
        if (tag == 56) {
         parse_centroidX:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &centroidx_)));
          set_has_centroidx();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_centroidY;
        break;
      }

      // required sint32 centroidY = 8;
      case 8: {
        if (tag == 64) {
         parse_centroidY:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &centroidy_)));
          set_has_centroidy();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:BoundingBox)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:BoundingBox)
  return false;
#undef DO_
}

void BoundingBox::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:BoundingBox)
  // required sint32 startX = 1;
  if (has_startx()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(1, this->startx(), output);
  }

  // required sint32 endX = 2;
  if (has_endx()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(2, this->endx(), output);
  }

  // required sint32 startY = 3;
  if (has_starty()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(3, this->starty(), output);
  }

  // required sint32 endY = 4;
  if (has_endy()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(4, this->endy(), output);
  }

  // required uint32 width = 5;
  if (has_width()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->width(), output);
  }

  // required uint32 height = 6;
  if (has_height()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->height(), output);
  }

  // required sint32 centroidX = 7;
  if (has_centroidx()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(7, this->centroidx(), output);
  }

  // required sint32 centroidY = 8;
  if (has_centroidy()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(8, this->centroidy(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:BoundingBox)
}

::google::protobuf::uint8* BoundingBox::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:BoundingBox)
  // required sint32 startX = 1;
  if (has_startx()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(1, this->startx(), target);
  }

  // required sint32 endX = 2;
  if (has_endx()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(2, this->endx(), target);
  }

  // required sint32 startY = 3;
  if (has_starty()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(3, this->starty(), target);
  }

  // required sint32 endY = 4;
  if (has_endy()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(4, this->endy(), target);
  }

  // required uint32 width = 5;
  if (has_width()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->width(), target);
  }

  // required uint32 height = 6;
  if (has_height()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->height(), target);
  }

  // required sint32 centroidX = 7;
  if (has_centroidx()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(7, this->centroidx(), target);
  }

  // required sint32 centroidY = 8;
  if (has_centroidy()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(8, this->centroidy(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:BoundingBox)
  return target;
}

int BoundingBox::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required sint32 startX = 1;
    if (has_startx()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->startx());
    }

    // required sint32 endX = 2;
    if (has_endx()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->endx());
    }

    // required sint32 startY = 3;
    if (has_starty()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->starty());
    }

    // required sint32 endY = 4;
    if (has_endy()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->endy());
    }

    // required uint32 width = 5;
    if (has_width()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->width());
    }

    // required uint32 height = 6;
    if (has_height()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->height());
    }

    // required sint32 centroidX = 7;
    if (has_centroidx()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->centroidx());
    }

    // required sint32 centroidY = 8;
    if (has_centroidy()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->centroidy());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BoundingBox::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BoundingBox* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BoundingBox*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BoundingBox::MergeFrom(const BoundingBox& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_startx()) {
      set_startx(from.startx());
    }
    if (from.has_endx()) {
      set_endx(from.endx());
    }
    if (from.has_starty()) {
      set_starty(from.starty());
    }
    if (from.has_endy()) {
      set_endy(from.endy());
    }
    if (from.has_width()) {
      set_width(from.width());
    }
    if (from.has_height()) {
      set_height(from.height());
    }
    if (from.has_centroidx()) {
      set_centroidx(from.centroidx());
    }
    if (from.has_centroidy()) {
      set_centroidy(from.centroidy());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BoundingBox::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BoundingBox::CopyFrom(const BoundingBox& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BoundingBox::IsInitialized() const {
  if ((_has_bits_[0] & 0x000000ff) != 0x000000ff) return false;

  return true;
}

void BoundingBox::Swap(BoundingBox* other) {
  if (other != this) {
    std::swap(startx_, other->startx_);
    std::swap(endx_, other->endx_);
    std::swap(starty_, other->starty_);
    std::swap(endy_, other->endy_);
    std::swap(width_, other->width_);
    std::swap(height_, other->height_);
    std::swap(centroidx_, other->centroidx_);
    std::swap(centroidy_, other->centroidy_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BoundingBox::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BoundingBox_descriptor_;
  metadata.reflection = BoundingBox_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LandMark::kIdFieldNumber;
const int LandMark::kXFieldNumber;
const int LandMark::kYFieldNumber;
#endif  // !_MSC_VER

LandMark::LandMark()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:LandMark)
}

void LandMark::InitAsDefaultInstance() {
}

LandMark::LandMark(const LandMark& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:LandMark)
}

void LandMark::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  x_ = 0;
  y_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LandMark::~LandMark() {
  // @@protoc_insertion_point(destructor:LandMark)
  SharedDtor();
}

void LandMark::SharedDtor() {
  if (this != default_instance_) {
  }
}

void LandMark::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LandMark::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LandMark_descriptor_;
}

const LandMark& LandMark::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_landmark_2eproto();
  return *default_instance_;
}

LandMark* LandMark::default_instance_ = NULL;

LandMark* LandMark::New() const {
  return new LandMark;
}

void LandMark::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<LandMark*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(id_, y_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LandMark::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:LandMark)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_X;
        break;
      }

      // required sint32 X = 2;
      case 2: {
        if (tag == 16) {
         parse_X:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &x_)));
          set_has_x();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_Y;
        break;
      }

      // required sint32 Y = 3;
      case 3: {
        if (tag == 24) {
         parse_Y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &y_)));
          set_has_y();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:LandMark)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:LandMark)
  return false;
#undef DO_
}

void LandMark::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:LandMark)
  // required uint32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // required sint32 X = 2;
  if (has_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(2, this->x(), output);
  }

  // required sint32 Y = 3;
  if (has_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(3, this->y(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:LandMark)
}

::google::protobuf::uint8* LandMark::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:LandMark)
  // required uint32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // required sint32 X = 2;
  if (has_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(2, this->x(), target);
  }

  // required sint32 Y = 3;
  if (has_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(3, this->y(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:LandMark)
  return target;
}

int LandMark::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

    // required sint32 X = 2;
    if (has_x()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->x());
    }

    // required sint32 Y = 3;
    if (has_y()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->y());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LandMark::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LandMark* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LandMark*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LandMark::MergeFrom(const LandMark& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_x()) {
      set_x(from.x());
    }
    if (from.has_y()) {
      set_y(from.y());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LandMark::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LandMark::CopyFrom(const LandMark& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LandMark::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void LandMark::Swap(LandMark* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(x_, other->x_);
    std::swap(y_, other->y_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LandMark::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LandMark_descriptor_;
  metadata.reflection = LandMark_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FaceInfos::kInfoFieldNumber;
#endif  // !_MSC_VER

FaceInfos::FaceInfos()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:FaceInfos)
}

void FaceInfos::InitAsDefaultInstance() {
}

FaceInfos::FaceInfos(const FaceInfos& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:FaceInfos)
}

void FaceInfos::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FaceInfos::~FaceInfos() {
  // @@protoc_insertion_point(destructor:FaceInfos)
  SharedDtor();
}

void FaceInfos::SharedDtor() {
  if (this != default_instance_) {
  }
}

void FaceInfos::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FaceInfos::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FaceInfos_descriptor_;
}

const FaceInfos& FaceInfos::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_landmark_2eproto();
  return *default_instance_;
}

FaceInfos* FaceInfos::default_instance_ = NULL;

FaceInfos* FaceInfos::New() const {
  return new FaceInfos;
}

void FaceInfos::Clear() {
  info_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FaceInfos::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:FaceInfos)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .FaceInfo info = 1;
      case 1: {
        if (tag == 10) {
         parse_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_info()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_info;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:FaceInfos)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:FaceInfos)
  return false;
#undef DO_
}

void FaceInfos::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:FaceInfos)
  // repeated .FaceInfo info = 1;
  for (int i = 0; i < this->info_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->info(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:FaceInfos)
}

::google::protobuf::uint8* FaceInfos::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:FaceInfos)
  // repeated .FaceInfo info = 1;
  for (int i = 0; i < this->info_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->info(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:FaceInfos)
  return target;
}

int FaceInfos::ByteSize() const {
  int total_size = 0;

  // repeated .FaceInfo info = 1;
  total_size += 1 * this->info_size();
  for (int i = 0; i < this->info_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->info(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FaceInfos::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FaceInfos* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FaceInfos*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FaceInfos::MergeFrom(const FaceInfos& from) {
  GOOGLE_CHECK_NE(&from, this);
  info_.MergeFrom(from.info_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FaceInfos::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FaceInfos::CopyFrom(const FaceInfos& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FaceInfos::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->info())) return false;
  return true;
}

void FaceInfos::Swap(FaceInfos* other) {
  if (other != this) {
    info_.Swap(&other->info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FaceInfos::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FaceInfos_descriptor_;
  metadata.reflection = FaceInfos_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)

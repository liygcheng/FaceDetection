// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: landmark.proto

#ifndef PROTOBUF_landmark_2eproto__INCLUDED
#define PROTOBUF_landmark_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_landmark_2eproto();
void protobuf_AssignDesc_landmark_2eproto();
void protobuf_ShutdownFile_landmark_2eproto();

class FaceInfo;
class BoundingBox;
class LandMark;
class FaceInfos;

// ===================================================================

class FaceInfo : public ::google::protobuf::Message {
 public:
  FaceInfo();
  virtual ~FaceInfo();

  FaceInfo(const FaceInfo& from);

  inline FaceInfo& operator=(const FaceInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FaceInfo& default_instance();

  void Swap(FaceInfo* other);

  // implements Message ----------------------------------------------

  FaceInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FaceInfo& from);
  void MergeFrom(const FaceInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bool state = 1;
  inline bool has_state() const;
  inline void clear_state();
  static const int kStateFieldNumber = 1;
  inline bool state() const;
  inline void set_state(bool value);

  // required string filename = 2;
  inline bool has_filename() const;
  inline void clear_filename();
  static const int kFilenameFieldNumber = 2;
  inline const ::std::string& filename() const;
  inline void set_filename(const ::std::string& value);
  inline void set_filename(const char* value);
  inline void set_filename(const char* value, size_t size);
  inline ::std::string* mutable_filename();
  inline ::std::string* release_filename();
  inline void set_allocated_filename(::std::string* filename);

  // required string basename = 3;
  inline bool has_basename() const;
  inline void clear_basename();
  static const int kBasenameFieldNumber = 3;
  inline const ::std::string& basename() const;
  inline void set_basename(const ::std::string& value);
  inline void set_basename(const char* value);
  inline void set_basename(const char* value, size_t size);
  inline ::std::string* mutable_basename();
  inline ::std::string* release_basename();
  inline void set_allocated_basename(::std::string* basename);

  // optional .BoundingBox box = 4;
  inline bool has_box() const;
  inline void clear_box();
  static const int kBoxFieldNumber = 4;
  inline const ::BoundingBox& box() const;
  inline ::BoundingBox* mutable_box();
  inline ::BoundingBox* release_box();
  inline void set_allocated_box(::BoundingBox* box);

  // repeated .LandMark landmark = 5;
  inline int landmark_size() const;
  inline void clear_landmark();
  static const int kLandmarkFieldNumber = 5;
  inline const ::LandMark& landmark(int index) const;
  inline ::LandMark* mutable_landmark(int index);
  inline ::LandMark* add_landmark();
  inline const ::google::protobuf::RepeatedPtrField< ::LandMark >&
      landmark() const;
  inline ::google::protobuf::RepeatedPtrField< ::LandMark >*
      mutable_landmark();

  // @@protoc_insertion_point(class_scope:FaceInfo)
 private:
  inline void set_has_state();
  inline void clear_has_state();
  inline void set_has_filename();
  inline void clear_has_filename();
  inline void set_has_basename();
  inline void clear_has_basename();
  inline void set_has_box();
  inline void clear_has_box();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* filename_;
  ::std::string* basename_;
  ::BoundingBox* box_;
  ::google::protobuf::RepeatedPtrField< ::LandMark > landmark_;
  bool state_;
  friend void  protobuf_AddDesc_landmark_2eproto();
  friend void protobuf_AssignDesc_landmark_2eproto();
  friend void protobuf_ShutdownFile_landmark_2eproto();

  void InitAsDefaultInstance();
  static FaceInfo* default_instance_;
};
// -------------------------------------------------------------------

class BoundingBox : public ::google::protobuf::Message {
 public:
  BoundingBox();
  virtual ~BoundingBox();

  BoundingBox(const BoundingBox& from);

  inline BoundingBox& operator=(const BoundingBox& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BoundingBox& default_instance();

  void Swap(BoundingBox* other);

  // implements Message ----------------------------------------------

  BoundingBox* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BoundingBox& from);
  void MergeFrom(const BoundingBox& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required sint32 startX = 1;
  inline bool has_startx() const;
  inline void clear_startx();
  static const int kStartXFieldNumber = 1;
  inline ::google::protobuf::int32 startx() const;
  inline void set_startx(::google::protobuf::int32 value);

  // required sint32 endX = 2;
  inline bool has_endx() const;
  inline void clear_endx();
  static const int kEndXFieldNumber = 2;
  inline ::google::protobuf::int32 endx() const;
  inline void set_endx(::google::protobuf::int32 value);

  // required sint32 startY = 3;
  inline bool has_starty() const;
  inline void clear_starty();
  static const int kStartYFieldNumber = 3;
  inline ::google::protobuf::int32 starty() const;
  inline void set_starty(::google::protobuf::int32 value);

  // required sint32 endY = 4;
  inline bool has_endy() const;
  inline void clear_endy();
  static const int kEndYFieldNumber = 4;
  inline ::google::protobuf::int32 endy() const;
  inline void set_endy(::google::protobuf::int32 value);

  // required uint32 width = 5;
  inline bool has_width() const;
  inline void clear_width();
  static const int kWidthFieldNumber = 5;
  inline ::google::protobuf::uint32 width() const;
  inline void set_width(::google::protobuf::uint32 value);

  // required uint32 height = 6;
  inline bool has_height() const;
  inline void clear_height();
  static const int kHeightFieldNumber = 6;
  inline ::google::protobuf::uint32 height() const;
  inline void set_height(::google::protobuf::uint32 value);

  // required sint32 centroidX = 7;
  inline bool has_centroidx() const;
  inline void clear_centroidx();
  static const int kCentroidXFieldNumber = 7;
  inline ::google::protobuf::int32 centroidx() const;
  inline void set_centroidx(::google::protobuf::int32 value);

  // required sint32 centroidY = 8;
  inline bool has_centroidy() const;
  inline void clear_centroidy();
  static const int kCentroidYFieldNumber = 8;
  inline ::google::protobuf::int32 centroidy() const;
  inline void set_centroidy(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:BoundingBox)
 private:
  inline void set_has_startx();
  inline void clear_has_startx();
  inline void set_has_endx();
  inline void clear_has_endx();
  inline void set_has_starty();
  inline void clear_has_starty();
  inline void set_has_endy();
  inline void clear_has_endy();
  inline void set_has_width();
  inline void clear_has_width();
  inline void set_has_height();
  inline void clear_has_height();
  inline void set_has_centroidx();
  inline void clear_has_centroidx();
  inline void set_has_centroidy();
  inline void clear_has_centroidy();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 startx_;
  ::google::protobuf::int32 endx_;
  ::google::protobuf::int32 starty_;
  ::google::protobuf::int32 endy_;
  ::google::protobuf::uint32 width_;
  ::google::protobuf::uint32 height_;
  ::google::protobuf::int32 centroidx_;
  ::google::protobuf::int32 centroidy_;
  friend void  protobuf_AddDesc_landmark_2eproto();
  friend void protobuf_AssignDesc_landmark_2eproto();
  friend void protobuf_ShutdownFile_landmark_2eproto();

  void InitAsDefaultInstance();
  static BoundingBox* default_instance_;
};
// -------------------------------------------------------------------

class LandMark : public ::google::protobuf::Message {
 public:
  LandMark();
  virtual ~LandMark();

  LandMark(const LandMark& from);

  inline LandMark& operator=(const LandMark& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LandMark& default_instance();

  void Swap(LandMark* other);

  // implements Message ----------------------------------------------

  LandMark* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const LandMark& from);
  void MergeFrom(const LandMark& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::uint32 id() const;
  inline void set_id(::google::protobuf::uint32 value);

  // required sint32 X = 2;
  inline bool has_x() const;
  inline void clear_x();
  static const int kXFieldNumber = 2;
  inline ::google::protobuf::int32 x() const;
  inline void set_x(::google::protobuf::int32 value);

  // required sint32 Y = 3;
  inline bool has_y() const;
  inline void clear_y();
  static const int kYFieldNumber = 3;
  inline ::google::protobuf::int32 y() const;
  inline void set_y(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:LandMark)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_x();
  inline void clear_has_x();
  inline void set_has_y();
  inline void clear_has_y();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 id_;
  ::google::protobuf::int32 x_;
  ::google::protobuf::int32 y_;
  friend void  protobuf_AddDesc_landmark_2eproto();
  friend void protobuf_AssignDesc_landmark_2eproto();
  friend void protobuf_ShutdownFile_landmark_2eproto();

  void InitAsDefaultInstance();
  static LandMark* default_instance_;
};
// -------------------------------------------------------------------

class FaceInfos : public ::google::protobuf::Message {
 public:
  FaceInfos();
  virtual ~FaceInfos();

  FaceInfos(const FaceInfos& from);

  inline FaceInfos& operator=(const FaceInfos& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FaceInfos& default_instance();

  void Swap(FaceInfos* other);

  // implements Message ----------------------------------------------

  FaceInfos* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FaceInfos& from);
  void MergeFrom(const FaceInfos& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .FaceInfo info = 1;
  inline int info_size() const;
  inline void clear_info();
  static const int kInfoFieldNumber = 1;
  inline const ::FaceInfo& info(int index) const;
  inline ::FaceInfo* mutable_info(int index);
  inline ::FaceInfo* add_info();
  inline const ::google::protobuf::RepeatedPtrField< ::FaceInfo >&
      info() const;
  inline ::google::protobuf::RepeatedPtrField< ::FaceInfo >*
      mutable_info();

  // @@protoc_insertion_point(class_scope:FaceInfos)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::FaceInfo > info_;
  friend void  protobuf_AddDesc_landmark_2eproto();
  friend void protobuf_AssignDesc_landmark_2eproto();
  friend void protobuf_ShutdownFile_landmark_2eproto();

  void InitAsDefaultInstance();
  static FaceInfos* default_instance_;
};
// ===================================================================


// ===================================================================

// FaceInfo

// required bool state = 1;
inline bool FaceInfo::has_state() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FaceInfo::set_has_state() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FaceInfo::clear_has_state() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FaceInfo::clear_state() {
  state_ = false;
  clear_has_state();
}
inline bool FaceInfo::state() const {
  // @@protoc_insertion_point(field_get:FaceInfo.state)
  return state_;
}
inline void FaceInfo::set_state(bool value) {
  set_has_state();
  state_ = value;
  // @@protoc_insertion_point(field_set:FaceInfo.state)
}

// required string filename = 2;
inline bool FaceInfo::has_filename() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void FaceInfo::set_has_filename() {
  _has_bits_[0] |= 0x00000002u;
}
inline void FaceInfo::clear_has_filename() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void FaceInfo::clear_filename() {
  if (filename_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    filename_->clear();
  }
  clear_has_filename();
}
inline const ::std::string& FaceInfo::filename() const {
  // @@protoc_insertion_point(field_get:FaceInfo.filename)
  return *filename_;
}
inline void FaceInfo::set_filename(const ::std::string& value) {
  set_has_filename();
  if (filename_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    filename_ = new ::std::string;
  }
  filename_->assign(value);
  // @@protoc_insertion_point(field_set:FaceInfo.filename)
}
inline void FaceInfo::set_filename(const char* value) {
  set_has_filename();
  if (filename_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    filename_ = new ::std::string;
  }
  filename_->assign(value);
  // @@protoc_insertion_point(field_set_char:FaceInfo.filename)
}
inline void FaceInfo::set_filename(const char* value, size_t size) {
  set_has_filename();
  if (filename_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    filename_ = new ::std::string;
  }
  filename_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:FaceInfo.filename)
}
inline ::std::string* FaceInfo::mutable_filename() {
  set_has_filename();
  if (filename_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    filename_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:FaceInfo.filename)
  return filename_;
}
inline ::std::string* FaceInfo::release_filename() {
  clear_has_filename();
  if (filename_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = filename_;
    filename_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void FaceInfo::set_allocated_filename(::std::string* filename) {
  if (filename_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete filename_;
  }
  if (filename) {
    set_has_filename();
    filename_ = filename;
  } else {
    clear_has_filename();
    filename_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:FaceInfo.filename)
}

// required string basename = 3;
inline bool FaceInfo::has_basename() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void FaceInfo::set_has_basename() {
  _has_bits_[0] |= 0x00000004u;
}
inline void FaceInfo::clear_has_basename() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void FaceInfo::clear_basename() {
  if (basename_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    basename_->clear();
  }
  clear_has_basename();
}
inline const ::std::string& FaceInfo::basename() const {
  // @@protoc_insertion_point(field_get:FaceInfo.basename)
  return *basename_;
}
inline void FaceInfo::set_basename(const ::std::string& value) {
  set_has_basename();
  if (basename_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    basename_ = new ::std::string;
  }
  basename_->assign(value);
  // @@protoc_insertion_point(field_set:FaceInfo.basename)
}
inline void FaceInfo::set_basename(const char* value) {
  set_has_basename();
  if (basename_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    basename_ = new ::std::string;
  }
  basename_->assign(value);
  // @@protoc_insertion_point(field_set_char:FaceInfo.basename)
}
inline void FaceInfo::set_basename(const char* value, size_t size) {
  set_has_basename();
  if (basename_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    basename_ = new ::std::string;
  }
  basename_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:FaceInfo.basename)
}
inline ::std::string* FaceInfo::mutable_basename() {
  set_has_basename();
  if (basename_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    basename_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:FaceInfo.basename)
  return basename_;
}
inline ::std::string* FaceInfo::release_basename() {
  clear_has_basename();
  if (basename_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = basename_;
    basename_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void FaceInfo::set_allocated_basename(::std::string* basename) {
  if (basename_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete basename_;
  }
  if (basename) {
    set_has_basename();
    basename_ = basename;
  } else {
    clear_has_basename();
    basename_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:FaceInfo.basename)
}

// optional .BoundingBox box = 4;
inline bool FaceInfo::has_box() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void FaceInfo::set_has_box() {
  _has_bits_[0] |= 0x00000008u;
}
inline void FaceInfo::clear_has_box() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void FaceInfo::clear_box() {
  if (box_ != NULL) box_->::BoundingBox::Clear();
  clear_has_box();
}
inline const ::BoundingBox& FaceInfo::box() const {
  // @@protoc_insertion_point(field_get:FaceInfo.box)
  return box_ != NULL ? *box_ : *default_instance_->box_;
}
inline ::BoundingBox* FaceInfo::mutable_box() {
  set_has_box();
  if (box_ == NULL) box_ = new ::BoundingBox;
  // @@protoc_insertion_point(field_mutable:FaceInfo.box)
  return box_;
}
inline ::BoundingBox* FaceInfo::release_box() {
  clear_has_box();
  ::BoundingBox* temp = box_;
  box_ = NULL;
  return temp;
}
inline void FaceInfo::set_allocated_box(::BoundingBox* box) {
  delete box_;
  box_ = box;
  if (box) {
    set_has_box();
  } else {
    clear_has_box();
  }
  // @@protoc_insertion_point(field_set_allocated:FaceInfo.box)
}

// repeated .LandMark landmark = 5;
inline int FaceInfo::landmark_size() const {
  return landmark_.size();
}
inline void FaceInfo::clear_landmark() {
  landmark_.Clear();
}
inline const ::LandMark& FaceInfo::landmark(int index) const {
  // @@protoc_insertion_point(field_get:FaceInfo.landmark)
  return landmark_.Get(index);
}
inline ::LandMark* FaceInfo::mutable_landmark(int index) {
  // @@protoc_insertion_point(field_mutable:FaceInfo.landmark)
  return landmark_.Mutable(index);
}
inline ::LandMark* FaceInfo::add_landmark() {
  // @@protoc_insertion_point(field_add:FaceInfo.landmark)
  return landmark_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::LandMark >&
FaceInfo::landmark() const {
  // @@protoc_insertion_point(field_list:FaceInfo.landmark)
  return landmark_;
}
inline ::google::protobuf::RepeatedPtrField< ::LandMark >*
FaceInfo::mutable_landmark() {
  // @@protoc_insertion_point(field_mutable_list:FaceInfo.landmark)
  return &landmark_;
}

// -------------------------------------------------------------------

// BoundingBox

// required sint32 startX = 1;
inline bool BoundingBox::has_startx() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BoundingBox::set_has_startx() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BoundingBox::clear_has_startx() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BoundingBox::clear_startx() {
  startx_ = 0;
  clear_has_startx();
}
inline ::google::protobuf::int32 BoundingBox::startx() const {
  // @@protoc_insertion_point(field_get:BoundingBox.startX)
  return startx_;
}
inline void BoundingBox::set_startx(::google::protobuf::int32 value) {
  set_has_startx();
  startx_ = value;
  // @@protoc_insertion_point(field_set:BoundingBox.startX)
}

// required sint32 endX = 2;
inline bool BoundingBox::has_endx() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BoundingBox::set_has_endx() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BoundingBox::clear_has_endx() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BoundingBox::clear_endx() {
  endx_ = 0;
  clear_has_endx();
}
inline ::google::protobuf::int32 BoundingBox::endx() const {
  // @@protoc_insertion_point(field_get:BoundingBox.endX)
  return endx_;
}
inline void BoundingBox::set_endx(::google::protobuf::int32 value) {
  set_has_endx();
  endx_ = value;
  // @@protoc_insertion_point(field_set:BoundingBox.endX)
}

// required sint32 startY = 3;
inline bool BoundingBox::has_starty() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void BoundingBox::set_has_starty() {
  _has_bits_[0] |= 0x00000004u;
}
inline void BoundingBox::clear_has_starty() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void BoundingBox::clear_starty() {
  starty_ = 0;
  clear_has_starty();
}
inline ::google::protobuf::int32 BoundingBox::starty() const {
  // @@protoc_insertion_point(field_get:BoundingBox.startY)
  return starty_;
}
inline void BoundingBox::set_starty(::google::protobuf::int32 value) {
  set_has_starty();
  starty_ = value;
  // @@protoc_insertion_point(field_set:BoundingBox.startY)
}

// required sint32 endY = 4;
inline bool BoundingBox::has_endy() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void BoundingBox::set_has_endy() {
  _has_bits_[0] |= 0x00000008u;
}
inline void BoundingBox::clear_has_endy() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void BoundingBox::clear_endy() {
  endy_ = 0;
  clear_has_endy();
}
inline ::google::protobuf::int32 BoundingBox::endy() const {
  // @@protoc_insertion_point(field_get:BoundingBox.endY)
  return endy_;
}
inline void BoundingBox::set_endy(::google::protobuf::int32 value) {
  set_has_endy();
  endy_ = value;
  // @@protoc_insertion_point(field_set:BoundingBox.endY)
}

// required uint32 width = 5;
inline bool BoundingBox::has_width() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void BoundingBox::set_has_width() {
  _has_bits_[0] |= 0x00000010u;
}
inline void BoundingBox::clear_has_width() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void BoundingBox::clear_width() {
  width_ = 0u;
  clear_has_width();
}
inline ::google::protobuf::uint32 BoundingBox::width() const {
  // @@protoc_insertion_point(field_get:BoundingBox.width)
  return width_;
}
inline void BoundingBox::set_width(::google::protobuf::uint32 value) {
  set_has_width();
  width_ = value;
  // @@protoc_insertion_point(field_set:BoundingBox.width)
}

// required uint32 height = 6;
inline bool BoundingBox::has_height() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void BoundingBox::set_has_height() {
  _has_bits_[0] |= 0x00000020u;
}
inline void BoundingBox::clear_has_height() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void BoundingBox::clear_height() {
  height_ = 0u;
  clear_has_height();
}
inline ::google::protobuf::uint32 BoundingBox::height() const {
  // @@protoc_insertion_point(field_get:BoundingBox.height)
  return height_;
}
inline void BoundingBox::set_height(::google::protobuf::uint32 value) {
  set_has_height();
  height_ = value;
  // @@protoc_insertion_point(field_set:BoundingBox.height)
}

// required sint32 centroidX = 7;
inline bool BoundingBox::has_centroidx() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void BoundingBox::set_has_centroidx() {
  _has_bits_[0] |= 0x00000040u;
}
inline void BoundingBox::clear_has_centroidx() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void BoundingBox::clear_centroidx() {
  centroidx_ = 0;
  clear_has_centroidx();
}
inline ::google::protobuf::int32 BoundingBox::centroidx() const {
  // @@protoc_insertion_point(field_get:BoundingBox.centroidX)
  return centroidx_;
}
inline void BoundingBox::set_centroidx(::google::protobuf::int32 value) {
  set_has_centroidx();
  centroidx_ = value;
  // @@protoc_insertion_point(field_set:BoundingBox.centroidX)
}

// required sint32 centroidY = 8;
inline bool BoundingBox::has_centroidy() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void BoundingBox::set_has_centroidy() {
  _has_bits_[0] |= 0x00000080u;
}
inline void BoundingBox::clear_has_centroidy() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void BoundingBox::clear_centroidy() {
  centroidy_ = 0;
  clear_has_centroidy();
}
inline ::google::protobuf::int32 BoundingBox::centroidy() const {
  // @@protoc_insertion_point(field_get:BoundingBox.centroidY)
  return centroidy_;
}
inline void BoundingBox::set_centroidy(::google::protobuf::int32 value) {
  set_has_centroidy();
  centroidy_ = value;
  // @@protoc_insertion_point(field_set:BoundingBox.centroidY)
}

// -------------------------------------------------------------------

// LandMark

// required uint32 id = 1;
inline bool LandMark::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void LandMark::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void LandMark::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void LandMark::clear_id() {
  id_ = 0u;
  clear_has_id();
}
inline ::google::protobuf::uint32 LandMark::id() const {
  // @@protoc_insertion_point(field_get:LandMark.id)
  return id_;
}
inline void LandMark::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:LandMark.id)
}

// required sint32 X = 2;
inline bool LandMark::has_x() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void LandMark::set_has_x() {
  _has_bits_[0] |= 0x00000002u;
}
inline void LandMark::clear_has_x() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void LandMark::clear_x() {
  x_ = 0;
  clear_has_x();
}
inline ::google::protobuf::int32 LandMark::x() const {
  // @@protoc_insertion_point(field_get:LandMark.X)
  return x_;
}
inline void LandMark::set_x(::google::protobuf::int32 value) {
  set_has_x();
  x_ = value;
  // @@protoc_insertion_point(field_set:LandMark.X)
}

// required sint32 Y = 3;
inline bool LandMark::has_y() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void LandMark::set_has_y() {
  _has_bits_[0] |= 0x00000004u;
}
inline void LandMark::clear_has_y() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void LandMark::clear_y() {
  y_ = 0;
  clear_has_y();
}
inline ::google::protobuf::int32 LandMark::y() const {
  // @@protoc_insertion_point(field_get:LandMark.Y)
  return y_;
}
inline void LandMark::set_y(::google::protobuf::int32 value) {
  set_has_y();
  y_ = value;
  // @@protoc_insertion_point(field_set:LandMark.Y)
}

// -------------------------------------------------------------------

// FaceInfos

// repeated .FaceInfo info = 1;
inline int FaceInfos::info_size() const {
  return info_.size();
}
inline void FaceInfos::clear_info() {
  info_.Clear();
}
inline const ::FaceInfo& FaceInfos::info(int index) const {
  // @@protoc_insertion_point(field_get:FaceInfos.info)
  return info_.Get(index);
}
inline ::FaceInfo* FaceInfos::mutable_info(int index) {
  // @@protoc_insertion_point(field_mutable:FaceInfos.info)
  return info_.Mutable(index);
}
inline ::FaceInfo* FaceInfos::add_info() {
  // @@protoc_insertion_point(field_add:FaceInfos.info)
  return info_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::FaceInfo >&
FaceInfos::info() const {
  // @@protoc_insertion_point(field_list:FaceInfos.info)
  return info_;
}
inline ::google::protobuf::RepeatedPtrField< ::FaceInfo >*
FaceInfos::mutable_info() {
  // @@protoc_insertion_point(field_mutable_list:FaceInfos.info)
  return &info_;
}


// @@protoc_insertion_point(namespace_scope)

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_landmark_2eproto__INCLUDED
